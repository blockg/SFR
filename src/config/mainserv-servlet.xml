<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"  
 xmlns:aop="http://www.springframework.org/schema/aop"
 xmlns:context="http://www.springframework.org/schema/context"  
 xmlns:p="http://www.springframework.org/schema/p"  
 xmlns:mvc="http://www.springframework.org/schema/mvc"  
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
 xmlns:tx="http://www.springframework.org/schema/tx"
 xsi:schemaLocation="http://www.springframework.org/schema/beans  
      http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
      http://www.springframework.org/schema/aop 
      http://www.springframework.org/schema/aop/spring-aop-3.0.xsd 
      http://www.springframework.org/schema/context  
      http://www.springframework.org/schema/context/spring-context.xsd  
      http://www.springframework.org/schema/mvc  
      http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
      http://www.springframework.org/schema/tx 
      http://www.springframework.org/schema/tx/spring-tx.xsd "> 
      
    
    
    
    <!-- Spring MVC配置 -->
    <context:annotation-config />
      
    <!-- 启动包扫描功能，以便注册带有@Controller、@Service、@repository、@Component等注解的类成为spring的bean -->  
    <context:component-scan base-package="comm" /> 
  
     <!--默认的mvc注解映射的支持 -->
    <mvc:annotation-driven/>
   
     
     
<!--  <bean class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor"/>   -->


 <!-- 启动 Spring MVC 的注解功能，完成请求和注解 POJO 的映射 --> 
 <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
 <property name="messageConverters">
 <list> 
 <bean class="org.springframework.http.converter.StringHttpMessageConverter"> 
 </bean> 
 </list> 
 </property> 
 </bean> 
 
     
       <!-- 对模型视图名称的解析，在请求时模型视图名称添加前后缀 -->  
     <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
     <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
     <property name="prefix" value="/WEB-INF/"></property>
     <property name="suffix" value=".jsp"></property>     
   </bean>   
     <bean id="multipartResolver"    
          class="org.springframework.web.multipart.commons.CommonsMultipartResolver"    
          p:defaultEncoding="utf-8" />      
     
 <!-- 拦截器 -->  
    <mvc:interceptors>  
        <!-- 多个拦截器,顺序执行 -->  
        <mvc:interceptor>  
           <mvc:mapping path="/*" /><!-- 如果不配置或/*,将拦截所有的Controller -->  
           <bean class="comm.mainfilter"></bean>  
        </mvc:interceptor>  
    </mvc:interceptors> 
       
    
    
    
    
 <!-- 数据库和事务配置 -->

    <!-- 加载配置文件 -->
    <context:property-placeholder location="classpath:config/dbconfig.properties" />
    <!-- 定义数据源 -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
        destroy-method="close">
 <!--The driver class name-->
		<property name="driverClass">
			<value>${jdbc.driverClassName}</value>
		</property>
		<!-- Connection URL -->
		<property name="jdbcUrl">
			<value>${jdbc.url}</value>
		</property>
		<!--Connect user name -->
		<property name="user">
			<value>${jdbc.username}</value>
		</property>
		<!--Connect password-->
		<property name="password">
			<value>${jdbc.password}</value>
		</property>
		<!-- Connection pool is initialized when the number of access links -->
		<property name="initialPoolSize">
			<value>${jdbc.initialPoolSize}</value>
		</property>
 
 
    <property name="minPoolSize" value="1"/>
    <property name="maxPoolSize" value="200"/>
    <property name="maxIdleTime" value="60"/>
    <property name="acquireIncrement" value="5"/>
    <property name="idleConnectionTestPeriod" value="60"/>
    </bean>    
    
    
      <bean id="sessionFactory"  
        class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">  
        <property name="dataSource" ref="dataSource" />  
        <property name="packagesToScan" value="comm" />  
        <property name="hibernateProperties">  
            <props>  
                <prop key="hibernate.dialect">${hibernate.dialect}</prop>  
                <prop key="hibernate.show_sql">${hibernate.show_sql}</prop>              
                <prop key="hibernate.cache.use_second_level_cache">${hibernate.cache.use_second_level_cache}</prop>  
                <prop key="hibernate.cache.use_query_cache">${hibernate.cache.use_query_cache}</prop>  
                <prop key="hibernate.cache.region.factory_class">${hibernate.cache.region.factory_class}</prop>  
               
            </props>  
        </property>  
 
    </bean>  
    
    
    
     <!-- 定义jdbcTemplate -->
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource">
            <ref bean="dataSource"/>
        </property>
    </bean>
    <bean id="namedParameterJdbcTemplate" class="org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate">
        <constructor-arg><ref bean="dataSource"/></constructor-arg> 
    </bean>
    
    
    
    
    <aop:aspectj-autoproxy expose-proxy="true"/>  
    <!-- 事务管理器，这里可以设置多个 -->  
    <tx:annotation-driven transaction-manager="transactionManager"/>  
  
    <!-- 给事务注入sessionFactory属性 -->  
    <bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">  
        <property name="sessionFactory" ref="sessionFactory" />  
    </bean>  
    

    
    
    
    
     <!-- 配置事务特性 ，配置add、delete和update开始的方法，事务传播特性为required -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="save*" propagation="REQUIRED" />
            <tx:method name="insert*" propagation="REQUIRED" />
            <tx:method name="delete*" propagation="REQUIRED" />
            <tx:method name="update*" propagation="REQUIRED" />
            <tx:method name="login*" propagation="REQUIRED" />
            <tx:method name="regist*" propagation="REQUIRED" />
            <tx:method name="*" read-only="true" />
        </tx:attributes>
    </tx:advice>
    
      <!-- 事务控制位置，一般在业务层service -->  
    <aop:config>  
        <aop:pointcut id="txPointcut" expression="execution(* comm.*.*(..))" />  
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"/>  
    </aop:config>     
     
    
    
    
    
    
    
</beans>  